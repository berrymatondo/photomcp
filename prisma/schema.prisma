// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatuses {
 ACTIF
 INACTIF
}

enum MemberStatuses {
 ACTIF
 INACTIF
 RETIRE
}

enum UserRoles {
 MEMBER
 ADMIN
}


model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  username String @unique
  status UserStatuses @default(INACTIF)
  role UserRoles @default(MEMBER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")

}

model Member{
  id Int @id @default(autoincrement())
  firstname String
  lastname String
  email String @unique
  mobile String
  status MemberStatuses @default(INACTIF)
  staann String? 
  comments String?
  Activites MembersOnActivites[]
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("members")
}



model Activite{
  id Int @id @default(autoincrement())
  name String
  date String
  comments String?
  members MembersOnActivites[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("activites")
}


model MembersOnActivites {
  member       Member     @relation(fields: [memberId], references: [id])
  memberId     Int // relation scalar field (used in the `@relation` attribute above)
  activite   Activite @relation(fields: [activiteId], references: [id])
  activiteId Int // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([memberId, activiteId])
}